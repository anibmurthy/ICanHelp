@model ICanHelp.Contracts.IndexViewDom
@{
    ViewData["Title"] = "Story Pointing";
    Layout = "~/Views/Shared/_Layout_full.cshtml";
}

<div class="row">
    <!--Join div-->
    <div class="col-md-5">
        <div class="card card-warning">
            <div class="card-header">
                <h3 class="card-title">Join a Table</h3>
            </div>
            @{
                await Html.RenderPartialAsync("JoinTablePartial", Model.joinTable, ViewData);
            }
        </div>
        <!-- /.card -->
    </div><!-- /.join div-->
    <!--Create div-->
    <div class="col-md-5">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Create a Table</h3>
            </div>
            @{
                await Html.RenderPartialAsync("CreateTablePartial", Model.createTable, ViewData);
            }
        </div>
        <!-- /.card -->
    </div> <!-- /.create div-->
</div>

<!-- jQuery -->
<script src="~/js/jquery/jquery.min.js"></script>
<!-- jquery-validation -->
<script src="~/js/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/js/jquery-validation/dist/additional-methods.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        $.validator.setDefaults({
            //submitHandler: function () {
            //    alert("Form successful submitted!");
            //}
        });
        $('#createtable').validate({
            rules: {
                TableName: {
                    required: true,
                    minlength: 3,
                },
                UserName: {
                    required: true,
                    minlength: 3
                },
                IsVoting: {
                    required: true
                },
            },
            messages: {
                TableName: {
                    required: "I need a team name to create pointing table",
                    minlength: "Too short! I need at least 3 characters"
                },
                UserName: {
                    required: "I need your name so others can know it is you",
                    minlength: "Too short! I need at least 3 characters"
                },
                IsVoting: "Tell me if you are voting so I can draw cards for you"
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
            }
        });

        $('#jointable').validate({
            rules: {
                TableId: {
                    required: true,
                    number: true,
                    minlength: 5
                },
                UserName: {
                    required: true,
                    minlength: 3
                },
                IsVoting: {
                    required: true
                },
            },
            messages: {
                TableId: {
                    required: "I need to know the table you are trying to join",
                    number: "Table Id is always a 5 digit number"
                },
                UserName: {
                    required: "I need your name so others can know it is you",
                    minlength: "Too short! I need at least 3 characters"
                },
                IsVoting: "Tell me if you are voting so I can draw cards for you"
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
            }
        });
    });
</script>